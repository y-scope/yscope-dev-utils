version: "3"

includes:
  checksum: "checksum.yaml"

set: ["u", "pipefail"]
shopt: ["globstar"]

tasks:
  # Runs curl to download a file from the given URL.
  #
  # @param {string} URL
  # @param {string} FILE_SHA256 Content hash to verify the downloaded file against.
  # @param {string} [OUTPUT_FILE={{(base .URL)}}] Path where the file should be stored.
  curl:
    internal: true
    label: "{{.TASK}}-{{.OUTPUT_FILE}}"
    vars:
      OUTPUT_FILE: "{{default (base .URL) .OUTPUT_FILE}}"
    requires:
      vars: ["FILE_SHA256", "URL"]
    generates: ["{{.OUTPUT_FILE}}"]
    status:
      - >-
        diff
        <(echo "{{.FILE_SHA256}}")
        <(openssl dgst -sha256 "{{.OUTPUT_FILE}}"
        | awk '{print $2}')
    cmds:
      - |-
        mkdir -p "{{dir .OUTPUT_FILE}}"
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl \
              --fail \
              --location \
              --show-error \
              --connect-timeout 10 \
              --max-time 300 \
              "{{.URL}}" \
              --output "{{.OUTPUT_FILE}}";
          then
            break
          fi
          attempt=$((attempt + 1))
          sleep 5
        done
        if [ $attempt -gt $max_attempts ]; then
          echo "Failed to download after $max_attempts attempts."
          exit 1
        fi

  # Runs curl to download the tar file from the given URL and extracts its contents.
  #
  # @param {string} OUTPUT_DIR Directory in which to extract the tar file.
  # @param {string} URL
  # @param {string} FILE_SHA256 Content hash to verify the downloaded tar file against.
  # @param {string} [CHECKSUM_FILE={{.OUTPUT_DIR}}.md5] File path to store the checksum of the
  # downloaded tar file.
  # @param {string[]} [EXCLUDE_PATTERNS] Path wildcard patterns that should not be extracted.
  # @param {string[]} [INCLUDE_PATTERNS] Path wildcard patterns to extract.
  # @param {int} [NUM_COMPONENTS_TO_STRIP=1] Number of leading path components to strip from the
  # extracted files.
  # @param {string} [TAR_FILE={{.OUTPUT_DIR}}.tar.gz] Path where the tar file should be stored.
  download-and-extract-tar:
    internal: true
    label: "{{.TASK}}-{{.OUTPUT_DIR}}"
    vars:
      # Paths
      CHECKSUM_FILE: >-
        {{default (printf "%s.md5" .OUTPUT_DIR) .CHECKSUM_FILE}}
      TAR_FILE: >-
        {{default (printf "%s.tar.gz" .OUTPUT_DIR) .TAR_FILE}}

      # Path patterns
      EXCLUDE_PATTERNS:
        ref: "default (list) .EXCLUDE_PATTERNS"
      INCLUDE_PATTERNS:
        ref: "default (list) .INCLUDE_PATTERNS"

      # Misc
      ARCHIVER: >-
        {{if eq OS "darwin"}}gtar{{else}}tar{{end}}
      NUM_COMPONENTS_TO_STRIP: "{{default 1 .NUM_COMPONENTS_TO_STRIP}}"
    requires:
      vars: ["FILE_SHA256", "OUTPUT_DIR", "URL"]
    sources: ["{{.TASKFILE}}", "{{.TAR_FILE}}"]
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "curl"
        vars:
          FILE_SHA256: "{{.FILE_SHA256}}"
          OUTPUT_FILE: "{{.TAR_FILE}}"
          URL: "{{.URL}}"
      - task: "checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - |-
        rm -rf "{{.OUTPUT_DIR}}"
        mkdir -p  "{{.OUTPUT_DIR}}"
      # Unlike for `tar --create`, in `--extract` both the exclude and include patterns can be
      # quoted since they're both evaluated by `tar`.
      - >-
        {{.ARCHIVER}}
        --extract
        --strip-components="{{.NUM_COMPONENTS_TO_STRIP}}"
        --directory "{{.OUTPUT_DIR}}"
        --file "{{.TAR_FILE}}"
        --no-anchored
        --wildcards
        {{- range .EXCLUDE_PATTERNS}}
        --exclude="{{.}}"
        {{- end}}
        {{- range .INCLUDE_PATTERNS}}
        "{{.}}"
        {{- end}}
        2> /dev/null
      # This command must be last
      - task: "checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
