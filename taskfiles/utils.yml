version: "3"

tasks:
  # ===
  # CHECKSUM UTILS
  # ===

  # @param {[]string} [DATA_PATHS] List of paths to compute the checksum for.
  # @param {string} OUTPUT_FILE
  # @param {[]string} [EXCLUDE_PATHS] List of paths, relative to any `DATA_PATHS`, to exclude from
  # the checksum.
  compute-checksum:
    desc: "Tries to compute a checksum for the given directory and output it to a file."
    internal: true
    silent: true
    requires:
      vars: ["DATA_PATHS", "OUTPUT_FILE"]
    cmds:
      - >-
        tar cf -
        --group 0
        --mtime "UTC 1970-01-01"
        --numeric-owner
        --owner 0
        --sort name
        {{- range .EXCLUDE_PATHS}}
        --exclude="{{.}}"
        {{- end}}
        {{- range .DATA_PATHS}}
        "{{.}}"
        {{- end}}
        2> /dev/null
        | md5sum > {{.OUTPUT_FILE}}
    # Ignore errors so that dependent tasks don't fail
    ignore_error: true

  # @param {[]string} [DATA_PATHS] List of paths to validate the checksum for.
  # @param {string} OUTPUT_FILE
  # @param {[]string} [EXCLUDE_PATHS] List of paths, relative to any `DATA_PATHS`, to exclude from
  # the checksum.
  validate-checksum:
    desc: "Validates the checksum of the given directory matches the checksum in the given file, or
    deletes the checksum file otherwise."
    internal: true
    silent: true
    vars:
      TMP_CHECKSUM_FILE: "{{.CHECKSUM_FILE}}.tmp"
    requires:
      vars: ["CHECKSUM_FILE", "DATA_PATHS"]
    cmds:
      - task: "compute-checksum"
        vars:
          DATA_PATHS:
            ref: ".DATA_PATHS"
          EXCLUDE_PATHS:
            ref: "default (list) .EXCLUDE_PATHS"
          OUTPUT_FILE: "{{.TMP_CHECKSUM_FILE}}"
      - defer: "rm -f '{{.TMP_CHECKSUM_FILE}}'"
      # Check that the path exists and the checksum matches; otherwise delete the checksum file
      - >-
        (
        {{- range .DATA_PATHS}}
        test -e "{{.}}" &&
        {{- end}}
        diff -q '{{.TMP_CHECKSUM_FILE}}' '{{.CHECKSUM_FILE}}' 2> /dev/null
        ) || rm -f '{{.CHECKSUM_FILE}}'

  # ===
  # STRING UTILS
  # ===
  replace-text:
    desc: "Replaces some text in a file using sed."
    internal: true
    requires:
      vars: ["FILE_PATH", "SED_EXP"]
    cmds:
      - |-
        # NOTE:
        # 1. We can't use `sed -i` since `-i` has different syntax on Linux and macOS
        # 2. We can't use `--regexp` instead of `-E` since `--regexp` is not supported on macOS
        src="{{.FILE_PATH}}"
        dst="{{.FILE_PATH}}.tmp"
        sed -E '{{.SED_EXP}}' "${src}" > "${dst}"
        mv "${dst}" "${src}"

  # ===
  # VENV UTILS
  # ===
  create-venv:
    desc: "Creates a Python venv using the given requirements file."
    internal: true
    label: "create-venv-{{.LABEL}}"
    requires:
      vars: ["LABEL", "OUTPUT_DIR", "REQUIREMENTS_FILE"]
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "python3 -m venv '{{.OUTPUT_DIR}}'"
      # Remove calls to `hash` from the venv activation script since Task uses `gosh` rather than
      # `bash`.
      # NOTE: Older versions of Python's venv would only call `hash` if they detected the running
      # shell was one that had the command, but that's not the case in newer versions.
      - task: "replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/bin/activate"
          SED_EXP: >-
            s/^([[:space:]]*)hash[[:space:]]+.*/\1true/g
      - |-
        . "{{.OUTPUT_DIR}}/bin/activate"
        pip3 install --upgrade pip
        pip3 install --upgrade -r "{{.REQUIREMENTS_FILE}}"

  # ===
  # C++ LINTING UTILS
  # ===

  # Runs clang-format on C++ files at the given paths.
  #
  # @param {string} FLAGS Any flags to pass to clang-format.
  # @param {[]string} SRC_PATHS The paths on which to run clang-format.
  # @param {string} VENV_DIR Python virtual environment where clang-format is installed.
  clang-format:
    internal: true
    requires:
      vars: ["FLAGS", "SRC_PATHS", "VENV_DIR"]
    cmd: |-
      . "{{.VENV_DIR}}/bin/activate"
      find {{- range .SRC_PATHS}} "{{.}}" {{- end}} \
        -type f \
        \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.hpp" \) \
        -print0 | \
          xargs -0 clang-format {{.FLAGS}} -Werror

  # Runs clang-tidy on C++ files at the given paths.
  #
  # @param {string} FLAGS Any flags to pass to clang-tidy.
  # @param {[]string} SRC_PATHS The paths on which to run clang-tidy.
  # @param {string} VENV_DIR Python virtual environment where clang-tidy is installed.
  clang-tidy:
    internal: true
    requires:
      vars: ["FLAGS", "SRC_PATHS", "VENV_DIR"]
    cmd: |-
      . "{{.VENV_DIR}}/bin/activate"
      find {{- range .SRC_PATHS}} "{{.}}" {{- end}} \
        -type f \
        \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.hpp" \) \
        -print0 | \
          xargs -0 clang-tidy {{.FLAGS}}

  # ===
  # CMAKE UTILS
  # ===

  # Runs cmake configure and build steps for the given source and build directories.
  #
  # @param {string} BUILD_DIR Cmake build directory to create.
  # @param {string} SOURCE_DIR Project source directory containing the CMakeLists.txt file.
  # @param {string}[optional] CHECKSUM_FILE Path to store the checksum of built files.
  # @param {string}[optional] CMAKE_ARGS Any additional arguments to pass to cmake configure.
  cmake-build:
    label: "cmake-build: {{.SOURCE_DIR}} {{.BUILD_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .BUILD_DIR) .CHECKSUM_FILE}}'
      CMAKE_ARGS: "{{default "" .CMAKE_ARGS}}"
    requires:
      vars: ["BUILD_DIR", "SOURCE_DIR"]
    sources:
      - "{{.SOURCE_DIR}}/**/*"
      - exclude: "{{.SOURCE_DIR}}/.cache/**/*"
      - exclude: "{{.SOURCE_DIR}}/compile_commands.json"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS: ["{{.BUILD_DIR}}"]
          EXCLUDE_PATHS: ["install_manifest.txt"]
    cmds:
      - >-
        cmake
        -S "{{.SOURCE_DIR}}"
        -B "{{.BUILD_DIR}}"
        {{.CMAKE_ARGS}}
      - >-
        cmake
        --build "{{.BUILD_DIR}}"
        --parallel
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS: ["{{.BUILD_DIR}}"]
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
          EXCLUDE_PATHS: ["install_manifest.txt"]

  # Runs cmake install step for the given build directory.
  #
  # @param {string} BUILD_DIR Cmake build directory.
  # @param {string} INSTALL_PREFIX Path prefix for installing the project.
  # @param {string}[optional] CHECKSUM_FILE Path to store the checksum of installed files.
  # @param {[]string}[optional] DATA_PATHS Paths to compute the the checksum for. Overrides using
  # the install prefix path.
  cmake-install:
    label: "cmake-install: {{.BUILD_DIR}} {{.INSTALL_PREFIX}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .INSTALL_PREFIX) .CHECKSUM_FILE}}'
      # Convert the install prefix to a single element array for the default case where DATA_PATHS
      # is not manually set.
      _INSTALL_PREFIX_ARRAY: ["{{.INSTALL_PREFIX}}"]
      DATA_PATHS:
        ref: "default ._INSTALL_PREFIX_ARRAY .DATA_PATHS"
    requires:
      vars: ["BUILD_DIR", "INSTALL_PREFIX"]
    sources:
      - "{{.BUILD_DIR}}/**/*"
      - exclude: "{{.BUILD_DIR}}/install_manifest.txt"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS:
            ref: ".DATA_PATHS"
    cmds:
      - >-
        cmake
        --install "{{.BUILD_DIR}}"
        --prefix "{{.INSTALL_PREFIX}}"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS:
            ref: ".DATA_PATHS"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  # ===
  # REMOTE UTILS
  # ===

  # Runs curl to download the provided URL.
  #
  # @param {string} URL
  # @param {string} URL_SHA256 Content hash to verify downloaded file against.
  # @param {string}[optional] OUTPUT_FILE File path to store the download file.
  curl:
    label: "curl: {{.OUTPUT_FILE}}"
    internal: true
    vars:
      OUTPUT_FILE: "{{default (base .URL) .OUTPUT_FILE}}"
    requires:
      vars: ["URL", "URL_SHA256"]
    generates:
      - "{{.OUTPUT_FILE}}"
    status:
      - >-
        diff
        <(echo "{{.URL_SHA256}}")
        <(openssl dgst -sha256 "{{.OUTPUT_FILE}}"
        | awk '{print $2}')
    cmds:
      - |-
        mkdir -p "{{dir .OUTPUT_FILE}}"
        curl -L "{{.URL}}" -o "{{.OUTPUT_FILE}}"

  # Runs curl to download the provided URL and tar to extract its contents.
  #
  # @param {string} OUTPUT_DIR Path to extract downloaded tar file contents to.
  # @param {string} URL
  # @param {string} URL_SHA256 Content hash to verify downloaded tar file against.
  # @param {string}[optional] CHECKSUM_FILE File path to store the checksum of downloaded tar file.
  # @param {int}[optional] STRIP Number of leading components to strip from file names for tar.
  # @param {string}[optional] TAR_FILE File path to store the downloaded tar file.
  fetch-src:
    label: "fetch-src: {{.OUTPUT_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .OUTPUT_DIR) .CHECKSUM_FILE}}'
      STRIP: "{{default 1 .STRIP}}"
      TAR_FILE: '{{default (printf "%s.tar.gz" .OUTPUT_DIR) .TAR_FILE}}'
    requires:
      vars: ["OUTPUT_DIR", "URL", "URL_SHA256"]
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}", "{{.TAR_FILE}}"]
    deps:
      - task: "curl"
        vars:
          URL: "{{.URL}}"
          URL_SHA256: "{{.URL_SHA256}}"
          OUTPUT_FILE: "{{.TAR_FILE}}"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - |-
        rm -rf "{{.OUTPUT_DIR}}"
        mkdir -p "{{.OUTPUT_DIR}}"
        tar -x --strip-components="{{.STRIP}}" -C "{{.OUTPUT_DIR}}" -f "{{.TAR_FILE}}"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS: ["{{.OUTPUT_DIR}}"]
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
