version: "3"

set: ["u", "pipefail"]
shopt: ["globstar"]

tasks:
  # @param {string} CHECKSUM_FILE
  # @param {string[]} INCLUDE_PATTERNS Path wildcard patterns to compute the checksum for.
  # @param {string[]} [EXCLUDE_PATTERNS] Path wildcard patterns, relative to any `INCLUDE_PATTERNS`,
  # to exclude from the checksum.
  compute:
    desc: "Tries to compute a checksum for the given paths and output it to a file."
    internal: true
    label: "{{.TASK}}-{{.CHECKSUM_FILE}}"
    silent: true
    vars:
      TAR: >-
        {{if eq OS "darwin"}}gtar{{else}}tar{{end}}
    requires:
      vars: ["CHECKSUM_FILE", "INCLUDE_PATTERNS"]
    cmds:
      # We explicitly set `--no-anchored` and `--wildcards` to make the inclusion behaviour match
      # the default exclusion behaviour.
      #
      # We can quote the exclude patterns for `tar` because the patterns themselves are passed to
      # `tar` as arguments and evaluated by `tar` during execution. However, for `tar --create`, the
      # input patterns cannot be quoted since they're evaluated by the shell and the results are
      # passed to `tar` as arguments. If the input patterns are passed to `tar` with quotes, the
      # pattern won't be evaluated and will instead be treated literally.
      - >-
        {{.TAR}}
        --create
        --file -
        --group 0
        --mtime "UTC 1970-01-01"
        --numeric-owner
        --owner 0
        --sort name
        --no-anchored
        --wildcards
        {{- range .EXCLUDE_PATTERNS}}
        --exclude="{{.}}"
        {{- end}}
        {{- range .INCLUDE_PATTERNS}}
        {{.}}
        {{- end}}
      - >-
        {{.TAR}}
        --create
        --file -
        --group 0
        --mtime "UTC 1970-01-01"
        --numeric-owner
        --owner 0
        --sort name
        --no-anchored
        --wildcards
        {{- range .EXCLUDE_PATTERNS}}
        --exclude="{{.}}"
        {{- end}}
        {{- range .INCLUDE_PATTERNS}}
        {{.}}
        {{- end}}
        2> /dev/null
        | md5sum > {{.CHECKSUM_FILE}}
    # Ignore errors so that dependent tasks don't fail
    ignore_error: true

  # Validates the checksum of the given path include patterns matches the checksum in the given
  # file. If `FAIL` is set to "true" the task will fail, otherwise the checksum file is deleted.
  #
  # @param {string} CHECKSUM_FILE
  # @param {string[]} INCLUDE_PATTERNS Path wildcard patterns to validate the checksum for.
  # @param {string[]} [EXCLUDE_PATTERNS] Path wildcard patterns, relative to any `INCLUDE_PATTERNS`,
  # to exclude from the checksum.
  # @param {string} [FAIL="false"] If set to "true" the task fails.
  validate:
    internal: true
    label: "{{.TASK}}-{{.CHECKSUM_FILE}}"
    vars:
      FAIL: >-
        {{- if (eq "true" .FAIL) -}}
          true
        {{- else}}
          false
        {{- end}}
      TMP_CHECKSUM_FILE: "{{.CHECKSUM_FILE}}.tmp"
    requires:
      vars:
        - "CHECKSUM_FILE"
        - "INCLUDE_PATTERNS"
    cmds:
      - task: "compute"
        vars:
          INCLUDE_PATTERNS:
            ref: ".INCLUDE_PATTERNS"
          EXCLUDE_PATTERNS:
            ref: "default (list) .EXCLUDE_PATTERNS"
          CHECKSUM_FILE: "{{.TMP_CHECKSUM_FILE}}"
      - defer: "rm -f '{{.TMP_CHECKSUM_FILE}}'"
      - |-
        (
          {{- range .INCLUDE_PATTERNS}}
          for path in {{.}}; do
            test -e "$path" || exit 1
          done
          {{- end}}
          cmp -s "{{.TMP_CHECKSUM_FILE}}" "{{.CHECKSUM_FILE}}"
        ) \
        {{- if eq "true" .FAIL}}
          || false
        {{- else}}
          || rm -f "{{.CHECKSUM_FILE}}"
        {{- end}}
