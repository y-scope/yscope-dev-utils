version: "3"

includes:
  checksum: "checksum.yaml"
  remote: "remote.yaml"

set: ["u", "pipefail"]
shopt: ["globstar"]

tasks:
  # Runs the Boost generate (bootstrap) step.
  #
  # @param {string} INSTALL_PREFIX Path prefix of where the project should be installed.
  # @param {string} SOURCE_DIR Project source directory.
  # @param {string[]} TARGETS Target libraries to build.
  # @param {string} [CHECKSUM_FILE={{.SOURCE_DIR}}.md5] Checksum file path for `SOURCE_DIR`.
  # @param {string[]} [EXTRA_ARGS] Any additional arguments to pass to the generate command.
  generate:
    internal: true
    label: "{{.TASK}}:{{.SOURCE_DIR}}"
    vars:
      CHECKSUM_FILE: >-
        {{default (printf "%s.md5" .SOURCE_DIR) .CHECKSUM_FILE}}
      EXTRA_ARGS:
        ref: "default (list) .EXTRA_ARGS"
      SOURCE_SENTINEL_FILE: "{{.SOURCE_DIR}}/{{.TASK}}.sentinel"
    requires:
      vars:
        - "INSTALL_PREFIX"
        - "TARGETS"
        - "SOURCE_DIR"
    sources: ["{{.TASKFILE}}"]
    generates:
      - "{{.CHECKSUM_FILE}}"
      - "{{.SOURCE_SENTINEL_FILE}}"
    deps:
      - task: "checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SOURCE_DIR}}"]
    cmds:
      - >-
        pushd "{{.SOURCE_DIR}}";
        ./bootstrap.sh
        --prefix="{{.INSTALL_PREFIX}}"
        --exec-prefix="{{.INSTALL_PREFIX}}"
        --with-libraries={{(join "," .TARGETS)}}
        {{- range .EXTRA_ARGS}}
          "{{.}}"
        {{- end}};
        popd
      - "touch '{{.SOURCE_SENTINEL_FILE}}'"
      - task: "checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SOURCE_DIR}}"]

  # Runs Boost's b2 build and install step.
  # Fails if the caller has not successfully called `generate` on `SOURCE_DIR`.
  #
  # Required parameters
  # @param {string} BUILD_DIR Directory in which to build boost.
  # @param {string} INSTALL_PREFIX Path prefix of where the project should be installed.
  # @param {string} SOURCE_DIR Directory containing boost's source and build files.
  #
  # Checksum parameters
  # @param {string} [BUILD_CHECKSUM_FILE={{.BUILD_DIR}}.md5] Checksum file path for `BUILD_DIR`.
  # @param {string} [INSTALL_CHECKSUM_FILE={{.INSTALL_PREFIX}}.md5] Checksum file path for
  # `INSTALL_PREFIX`
  # @param {string} [SOURCE_CHECKSUM_FILE={{.SOURCE_DIR}}.md5] Checksum file path for `SOURCE_DIR`.
  #
  # Build command parameters
  # @param {int} [JOBS] The maximum number of concurrent processes to use when building. If
  # omitted, the b2 default number is used. Before 1.76.0, the number was 1. Since 1.76.0, the
  # default is the number of cores.
  # @param {string[]} [EXTRA_ARGS] Any additional arguments to pass to the build command.
  build-and-install:
    internal: true
    label: "{{.TASK}}:{{.BUILD_DIR}}-{{.INSTALL_PREFIX}}"
    vars:
      # Checksum files
      BUILD_CHECKSUM_FILE: >-
        {{default (printf "%s.md5" .BUILD_DIR) .BUILD_CHECKSUM_FILE}}
      INSTALL_CHECKSUM_FILE: >-
        {{default (printf "%s.md5" .INSTALL_PREFIX) .INSTALL_CHECKSUM_FILE}}
      SOURCE_CHECKSUM_FILE: >-
        {{default (printf "%s.md5" .SOURCE_DIR) .SOURCE_CHECKSUM_FILE}}

      EXTRA_ARGS:
        ref: "default (list) .EXTRA_ARGS"
      SOURCE_SENTINEL_FILE: "{{.SOURCE_DIR}}/{{.TASK}}.sentinel"
    requires:
      vars:
        - "BUILD_DIR"
        - "INSTALL_PREFIX"
        - "SOURCE_DIR"
    sources: ["{{.TASKFILE}}"]
    generates:
      - "{{.BUILD_CHECKSUM_FILE}}"
      - "{{.INSTALL_CHECKSUM_FILE}}"
      - "{{.SOURCE_CHECKSUM_FILE}}"
      - "{{.SOURCE_SENTINEL_FILE}}"
    deps:
      - task: "checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.BUILD_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.BUILD_DIR}}"]
      - task: "checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.INSTALL_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.INSTALL_PREFIX}}"]
      - task: "checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.SOURCE_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SOURCE_DIR}}"]
          FAIL: "true"
    cmds:
      - >-
        pushd "{{.SOURCE_DIR}}";
        ./b2
        install
        --build-dir="{{.BUILD_DIR}}"
        {{- range .EXTRA_ARGS}}
          "{{.}}"
        {{- end}}
        {{- if .JOBS}}
          "-j{{.JOBS}}"
        {{- end}};
        popd;
      - "touch '{{.SOURCE_SENTINEL_FILE}}'"
      - task: "checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.BUILD_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.BUILD_DIR}}"]
      - task: "checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.INSTALL_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.INSTALL_PREFIX}}"]
      - task: "checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.SOURCE_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SOURCE_DIR}}"]

  # Downloads Boost from `TAR_URL` and then generates, builds, and installs Boost inside `WORK_DIR`.
  # If `CMAKE_SETTINGS_DIR` is set, a settings file will be created in that directory, containing a
  # `Boost_ROOT` CMake variable that points to `INSTALL_PREFIX`.
  #
  # General parameters
  # @param {string} TAR_SHA256 Content hash to verify the downloaded tar file against.
  # @param {string} TAR_URL URL of the tar file to download.
  # @param {string} WORK_DIR Directory in which to store the source, build, and install directories.
  # @param {string} [CMAKE_SETTINGS_DIR] If set, the directory where the project's CMake settings
  # file should be stored.
  #
  # Boost parameters
  # @param {string[]} [BUILD_AND_INSTALL_ARGS] Any additional arguments to pass to boost's build and
  # install command.
  # @param {string[]} [GENERATE_ARGS] Any additional arguments to pass to the generate command.
  # @param {int} [JOBS] The maximum number of concurrent processes to use when building. If
  # omitted, the b2 default number is used. Before 1.76.0, the number was 1. Since 1.76.0, the
  # default is the number of cores.
  # @param {string[]} [TARGETS] Target libraries to build.
  download-and-install:
    internal: true
    label: "{{.TASK}}:{{.TAR_URL}}-{{.WORK_DIR}}"
    vars:
      # Directory parameters
      BUILD_DIR: "{{.WORK_DIR}}/boost-build"
      INSTALL_PREFIX: "{{.WORK_DIR}}/boost-install"
      SOURCE_DIR: "{{.WORK_DIR}}/boost-src"
    requires:
      vars:
        - "TAR_SHA256"
        - "TAR_URL"
        - "WORK_DIR"
    deps:
      - task: "remote:download-and-extract-tar"
        vars:
          FILE_SHA256: "{{.TAR_SHA256}}"
          OUTPUT_DIR: "{{.SOURCE_DIR}}"
          URL: "{{.TAR_URL}}"
    cmds:
      - task: "generate"
        vars:
          INSTALL_PREFIX: "{{.INSTALL_PREFIX}}"
          SOURCE_DIR: "{{.SOURCE_DIR}}"
          TARGETS:
            ref: ".TARGETS"
          EXTRA_ARGS:
            ref: ".GENERATE_ARGS"
      - task: "build-and-install"
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          INSTALL_PREFIX: "{{.INSTALL_PREFIX}}"
          SOURCE_DIR: "{{.SOURCE_DIR}}"
          EXTRA_ARGS:
            ref: ".BUILD_AND_INSTALL_ARGS"
          JOBS: "{{.JOBS}}"
      - >-
        {{- if .CMAKE_SETTINGS_DIR}}
          echo "set(Boost_ROOT
            \"{{.INSTALL_PREFIX}}\"
            CACHE PATH
            \"Package root for Boost.\"
          )" > "{{.CMAKE_SETTINGS_DIR}}/Boost.cmake"
        {{- end}}
